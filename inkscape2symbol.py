# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Inkscape2Symbol
                                 A QGIS plugin
 Import SVG drawings created in Inkscape as symbols in QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-09-30
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Hennie Kotze
        email                : javaftw@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path
from random import randint
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QUrl
from qgis.PyQt.QtGui import QIcon, QColor
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .inkscape2symbol_dialog import Inkscape2SymbolDialog

class Inkscape2Symbol:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        self.actions = []
        self.menu = self.tr(u'&Inkscape2Symbol')
        self.first_start = None
        self.svgMem = MemSVG()
        
        # Initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Inkscape2Symbol_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

    def tr(self, message):
        """Get the translation for a string using Qt translation API."""
        return QCoreApplication.translate('Inkscape2Symbol', message)

    def add_action(self, icon_path, text, callback, enabled_flag=True,
                   add_to_menu=True, add_to_toolbar=True, status_tip=None,
                   whats_this=None, parent=None):
        """Add a toolbar icon to the toolbar."""
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)
        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        icon_path = ':/plugins/inkscape2symbol/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Convert Inkscape SVG into symbol'),
            callback=self.run,
            parent=self.iface.mainWindow())

        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr(u'&Inkscape2Symbol'), action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""
        if self.first_start:
            self.first_start = False
            self.dlg = Inkscape2SymbolDialog()

        # Connect signals
        self.dlg.inputfile.fileChanged.connect(self.infileChangedAction)
        self.dlg.outputfolder.fileChanged.connect(self.outfileChangedAction)
        self.dlg.fillColour.colorChanged.connect(self.fillColAction)
        self.dlg.outlineColour.colorChanged.connect(self.outlineColAction)
        self.dlg.btnExportSVG.clicked.connect(self.writeSVG)
        self.dlg.cbNoOutline.toggled.connect(self.setNoOutline)
        self.dlg.btnReset.clicked.connect(self.resetAction)
        self.dlg.btnRandomize.clicked.connect(self.randomizeAction)

        # Set up UI
        self.dlg.inputfile.setFilter("*.svg")
        self.dlg.outputfolder.setStorageMode(3)
        self.dlg.fillColour.setColor(QColor(220, 220, 220, 255))
        self.dlg.outlineColour.setColor(QColor(0, 0, 0, 255))

        # Show the dialog
        self.dlg.show()
        self.dlg.outputfolder.lineEdit().setValue("")
        self.dlg.webViewOutput.setHtml("")
        self.dlg.lblFileSize.setText("")

        # Run the dialog event loop
        result = self.dlg.exec_()
        
        # See if OK was pressed
        if result:
            self.recompileSvg()

    def recompileSvg(self):
        """Recompile the SVG with new colors and settings"""
        if self.svgMem.data is None:
            return

        svgcontent = self.svgMem.text
        
        # Check if SVG has already been processed
        if "i2s=" in svgcontent:
            self.updateExistingSvg(svgcontent)
        else:
            self.createNewSvg(svgcontent)

    def updateExistingSvg(self, svgcontent):
        """Update an existing processed SVG"""
        svg_parts = svgcontent.split("<")
        for svg_part in svg_parts:
            if "fill:" in svg_part:
                svgcontent = self.replaceAttribute(svgcontent, svg_part, "fill:", self.dlg.fillColour.color().name())
            if "stroke:" in svg_part:
                svgcontent = self.replaceAttribute(svgcontent, svg_part, "stroke:", self.dlg.outlineColour.color().name())
            if "stroke-width:" in svg_part:
                tempwidth = "0.0" if self.dlg.cbNoOutline.isChecked() else "0.2"
                svgcontent = self.replaceAttribute(svgcontent, svg_part, "stroke-width:", tempwidth)
            if "fill=" in svg_part:
                svgcontent = self.replaceParameter(svgcontent, svg_part, "fill=", self.dlg.fillColour.color().name())
            if "stroke=" in svg_part:
                svgcontent = self.replaceParameter(svgcontent, svg_part, "stroke=", self.dlg.outlineColour.color().name())
            if "stroke-width=" in svg_part:
                tempwidth = "0.0" if self.dlg.cbNoOutline.isChecked() else "0.2"
                svgcontent = self.replaceParameter(svgcontent, svg_part, "stroke-width=", tempwidth)
        
        self.svgMem.setText(svgcontent)
        self.dlg.lblStatus.setText("Modified")

    def replaceAttribute(self, content, part, attr, value):
        """Replace an attribute in the SVG content"""
        idxS = part.find(attr)
        idxE = part.find(";", idxS)
        return content.replace(part[idxS:idxE], f"{attr}{value}")

    def replaceParameter(self, content, part, param, value):
        """Replace a parameter in the SVG content"""
        idxS = part.find(param)
        idxE = part.find("\"", idxS + len(param) + 1)
        return content.replace(part[idxS:idxE+1], f'{param}"param({param.rstrip("=")}) {value}"')

    def createNewSvg(self, svgcontent):
        """Create a new processed SVG"""
        svgcontent = self.cleanupSvgContent(svgcontent)
        
        new_svg_tag, svg_attrib_vals = self.extractSvgAttributes(svgcontent)
        gcontent_arr = self.extractGContent(svgcontent)
        
        new_gcontent = self.createNewGContent(gcontent_arr)
        new_svg = new_svg_tag.replace("*", gcontent_arr[0] + new_gcontent + "</g>")
        
        new_svg = self.removeNamespaces(new_svg)
        self.svgMem.setText(new_svg)
        self.dlg.lblStatus.setText("Modified")

    def cleanupSvgContent(self, content):
        """Clean up SVG content by removing unnecessary whitespace"""
        content = content.replace("\n", " ")
        while "  " in content:
            content = content.replace("  ", " ")
        return content

    def extractSvgAttributes(self, content):
        """Extract SVG attributes from the content"""
        new_svg_tag = '<svg i2s="yes" enable-background="new {2}" width="{0}" height="{1}" viewBox="{2}" xmlns="http://www.w3.org/2000/svg">*</svg>'
        svg_attrib_vals = []
        
        if "<svg " in content:
            idxS = content.find("<svg ")
            idxE = content.find(">", idxS)
            svgtag = content[idxS:idxE]
            
            for attr in ["width=", "height=", "viewBox="]:
                if attr in svgtag:
                    idxS = svgtag.find(attr)
                    idxE = svgtag.find("\"", idxS + len(attr) + 1)
                    svg_attrib_vals.append(svgtag[idxS + len(attr) + 1:idxE])
            
            new_svg_tag = new_svg_tag.format(*svg_attrib_vals)
        
        return new_svg_tag, svg_attrib_vals

    def extractGContent(self, content):
        """Extract g content from SVG"""
        gcontent_arr = []
        if "<g " in content:
            indexStart = content.find("<g ")
            indexEnd = content.find("</g>", indexStart)
            gcontent = content[indexStart:indexEnd + 4]
            gcontent = gcontent.replace("><", ">\n<")
            gcontent = gcontent.replace("> <", ">\n<")
            gcontent_arr = gcontent.split("\n")
        return gcontent_arr

    def createNewGContent(self, gcontent_arr):
        """Create new g content with updated styles"""
        new_style_attrib = 'style="opacity:1;fill:{0};fill-opacity:1;stroke:{1};stroke-width:{2};stroke-opacity:1" fill="param(fill) {0}" stroke="param(outline) {1}" stroke-width="param(outline-width) {2}"'
        new_gcontent = ""
        
        if len(gcontent_arr) > 1:
            if "transform" in gcontent_arr[0]:
                stemp = gcontent_arr[0]
                idxS = stemp.find("transform")
                idxE = stemp.find("\"", idxS + 11)
                gcontent_arr[0] = "<g {0}>".format(stemp[idxS:idxE + 1])
            
            for s in gcontent_arr[1:]:
                if "style=" in s:
                    idxS = s.find("style=\"")
                    idxE = s.find("\"", idxS + 7)
                    s1 = s[idxS:idxE + 1]
                    s2 = s.replace(s1, new_style_attrib.format(
                        self.dlg.fillColour.color().name(),
                        self.dlg.outlineColour.color().name(),
                        "0.2"
                    ))
                    new_gcontent += s2
        
        return new_gcontent

    def removeNamespaces(self, svg):
        """Remove Inkscape and Sodipodi namespaces from SVG"""
        for ns in ["inkscape", "sodipodi"]:
            while ns in svg:
                idxS = svg.find(ns)
                idxE = svg.find(" ", idxS)
                s1 = svg[idxS:idxE]
                svg = svg.replace(s1, "")
        return svg.replace("</g></g>", "</g>")

    def infileChangedAction(self):
        """Handle input file change"""
        try:
            if os.path.isfile(self.dlg.inputfile.filePath()) and self.dlg.inputfile.filePath().endswith(".svg"):
                self.dlg.lblFileSize.setText("{:.2f}kB".format(os.path.getsize(self.dlg.inputfile.filePath()) / 1024))
                self.svgMem.setData(self.readSVGFile(self.dlg.inputfile.filePath()))
                svgcontent = self.svgMem.text
                if ("inkscape" in svgcontent) or ("xmlns:" in svgcontent):
                    self.dlg.webViewOriginal.load(QUrl('file://' + self.dlg.inputfile.filePath()))
                    self.dlg.fillColour.setColor(QColor(self.svgMem.fill_original))
                    self.dlg.outlineColour.setColor(QColor(self.svgMem.outline_original))
                    self.drawMemSVG()
                else:
                    self.dlg.webViewOriginal.setHtml("<span style='font-family:sans-serif;font-size:11px;'>Not recognized as a<br>supported SVG format</span>")
                    self.svgMem.clear()
                    self.drawMemSVG()
            else:
                self.dlg.webViewOriginal.setHtml("<span style='font-family:sans-serif;font-size:11px;'>No SVG file selected</span>")
                self.svgMem.clear()
                self.drawMemSVG()
                self.dlg.lblFileSize.setText("")
        except Exception as ex:
            print(ex)

    def outfileChangedAction(self):
        """Handle output file change"""
        self.drawMemSVG()

    def outlineColAction(self):
        """Handle outline color change"""
        self.recompileSvg()
        self.outfileChangedAction()

    def fillColAction(self):
        """Handle fill color change"""
        self.recompileSvg()
        self.outfileChangedAction()

    def readSVGFile(self, filepath):
        """Read SVG file content"""
        with open(filepath, 'rb') as inputsvg:
            return inputsvg.read()

    def writeSVG(self):
        """Write SVG file"""
        if len(self.dlg.outputfolder.filePath()) > 0:
            outfolder = self.dlg.outputfolder.filePath()
            if not outfolder.endswith(".svg"):
                outfolder += ".svg"
            try:
                with open(outfolder, 'w') as outputsvg:
                    outputsvg.write(self.svgMem.text)
                self.dlg.lblStatus.setText("Saved")
            except PermissionError:
                self.dlg.lblStatus.setText("Permission denied")
            except Exception as e:
                self.dlg.lblStatus.setText(f"Error: {str(e)}")
        else:
            self.dlg.lblStatus.setText("Not saved")

    def drawMemSVG(self):
        """Draw SVG in memory"""
        if self.svgMem.data is not None:
            self.dlg.webViewOutput.setContent(self.svgMem.data, "image/svg+xml")
            self.dlg.lblStatus.setText("Modified")
        else:
            self.dlg.webViewOutput.setHtml("")

    def setNoOutline(self):
        """Set no outline for SVG"""
        if self.svgMem.data is not None:
            self.recompileSvg()
            self.drawMemSVG()

    def resetAction(self):
        """Reset SVG to original colors"""
        if self.svgMem.data is not None:
            self.dlg.fillColour.setColor(QColor(self.svgMem.fill_original))
            self.dlg.outlineColour.setColor(QColor(self.svgMem.outline_original))
            self.recompileSvg()
            self.drawMemSVG()

    def randomizeAction(self):
        """Randomize SVG colors"""
        self.dlg.fillColour.setColor(QColor(self.randomColor()))
        self.dlg.outlineColour.setColor(QColor(self.randomColor()))
        if self.svgMem.data is not None:
            self.recompileSvg()
            self.drawMemSVG()

    @staticmethod
    def randomColor():
        """Generate a random color"""
        return "#" + ''.join([hex(randint(0, 255))[2:].zfill(2) for _ in range(3)])

class MemSVG:
    """Class to handle SVG in memory"""

    def __init__(self):
        self.width = ""
        self.height = ""
        self.fill_original = ""
        self.fill = ""
        self.outline_original = ""
        self.outline = ""
        self.text = ""
        self.data = None

    def setData(self, d):
        """Set SVG data"""
        self.data = d
        self.text = d.decode("utf-8")
        self.parse()

    def setText(self, t):
        """Set SVG text"""
        self.text = t
        self.data = str.encode(t)
        self.parse()

    def clear(self):
        """Clear all SVG data"""
        self.width = ""
        self.height = ""
        self.fill_original = ""
        self.fill = ""
        self.outline_original = ""
        self.outline = ""
        self.text = ""
        self.data = None

    def parse(self):
        """Parse SVG content"""
        self.parseFill()
        self.parseOutline()

    def parseFill(self):
        """Parse fill color from SVG"""
        if "fill:" in self.text:
            idxS = self.text.find("fill:")
            idxE = self.text.find(";", idxS)
            self.fill = self.text[idxS + 5:idxE]
            if not self.fill_original:
                self.fill_original = self.fill

    def parseOutline(self):
        """Parse outline color from SVG"""
        if "stroke:" in self.text:
            idxS = self.text.find("stroke:")
            idxE = self.text.find(";", idxS)
            self.outline = self.text[idxS + 7:idxE]
            if not self.outline_original:
                self.outline_original = self.outline
